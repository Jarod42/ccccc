.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LIT 1"
.TH LIT 1 "2012-03-26" "CVS" "LLVM Command Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
lit \- LLVM Integrated Tester
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBlit\fR [\fIoptions\fR] [\fItests\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBlit\fR is a portable tool for executing \s-1LLVM\s0 and Clang style test suites,
summarizing their results, and providing indication of failures. \fBlit\fR is
designed to be a lightweight testing tool with as simple a user interface as
possible.
.PP
\&\fBlit\fR should be run with one or more \fItests\fR to run specified on the command
line. Tests can be either individual test files or directories to search for
tests (see \*(L"\s-1TEST\s0 \s-1DISCOVERY\s0\*(R").
.PP
Each specified test will be executed (potentially in parallel) and once all
tests have been run \fBlit\fR will print summary information on the number of tests
which passed or failed (see \*(L"\s-1TEST\s0 \s-1STATUS\s0 \s-1RESULTS\s0\*(R"). The \fBlit\fR program will
execute with a non-zero exit code if any tests fail.
.PP
By default \fBlit\fR will use a succinct progress display and will only print
summary information for test failures. See \*(L"\s-1OUTPUT\s0 \s-1OPTIONS\s0\*(R" for options
controlling the \fBlit\fR progress display and output.
.PP
\&\fBlit\fR also includes a number of options for controlling how tests are executed
(specific features may depend on the particular test format). See \*(L"\s-1EXECUTION\s0
\&\s-1OPTIONS\s0\*(R" for more information.
.PP
Finally, \fBlit\fR also supports additional options for only running a subset of
the options specified on the command line, see \*(L"\s-1SELECTION\s0 \s-1OPTIONS\s0\*(R" for
more information.
.PP
Users interested in the \fBlit\fR architecture or designing a \fBlit\fR testing
implementation should see \*(L"\s-1LIT\s0 \s-1INFRASTRUCTURE\s0\*(R"
.SH "GENERAL OPTIONS"
.IX Header "GENERAL OPTIONS"
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Show the \fBlit\fR help message.
.IP "\fB\-j\fR \fIN\fR, \fB\-\-threads\fR=\fIN\fR" 4
.IX Item "-j N, --threads=N"
Run \fIN\fR tests in parallel. By default, this is automatically chosen to match
the number of detected available CPUs.
.IP "\fB\-\-config\-prefix\fR=\fI\s-1NAME\s0\fR" 4
.IX Item "--config-prefix=NAME"
Search for \fI\s-1NAME\s0.cfg\fR and \fI\s-1NAME\s0.site.cfg\fR when searching for test suites,
instead of \fIlit.cfg\fR and \fIlit.site.cfg\fR.
.IP "\fB\-\-param\fR \fI\s-1NAME\s0\fR, \fB\-\-param\fR \fI\s-1NAME\s0\fR=\fI\s-1VALUE\s0\fR" 4
.IX Item "--param NAME, --param NAME=VALUE"
Add a user defined parameter \fI\s-1NAME\s0\fR with the given \fI\s-1VALUE\s0\fR (or the empty
string if not given). The meaning and use of these parameters is test suite
dependent.
.SH "OUTPUT OPTIONS"
.IX Header "OUTPUT OPTIONS"
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 4
.IX Item "-q, --quiet"
Suppress any output except for test failures.
.IP "\fB\-s\fR, \fB\-\-succinct\fR" 4
.IX Item "-s, --succinct"
Show less output, for example don't show information on tests that pass.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Show more information on test failures, for example the entire test output
instead of just the test result.
.IP "\fB\-\-no\-progress\-bar\fR" 4
.IX Item "--no-progress-bar"
Do not use curses based progress bar.
.SH "EXECUTION OPTIONS"
.IX Header "EXECUTION OPTIONS"
.IP "\fB\-\-path\fR=\fI\s-1PATH\s0\fR" 4
.IX Item "--path=PATH"
Specify an addition \fI\s-1PATH\s0\fR to use when searching for executables in tests.
.IP "\fB\-\-vg\fR" 4
.IX Item "--vg"
Run individual tests under valgrind (using the memcheck tool). The
\&\fI\-\-error\-exitcode\fR argument for valgrind is used so that valgrind failures will
cause the program to exit with a non-zero status.
.IP "\fB\-\-vg\-arg\fR=\fI\s-1ARG\s0\fR" 4
.IX Item "--vg-arg=ARG"
When \fI\-\-vg\fR is used, specify an additional argument to pass to valgrind itself.
.IP "\fB\-\-time\-tests\fR" 4
.IX Item "--time-tests"
Track the wall time individual tests take to execute and includes the results in
the summary output. This is useful for determining which tests in a test suite
take the most time to execute. Note that this option is most useful with \fI\-j
1\fR.
.SH "SELECTION OPTIONS"
.IX Header "SELECTION OPTIONS"
.IP "\fB\-\-max\-tests\fR=\fIN\fR" 4
.IX Item "--max-tests=N"
Run at most \fIN\fR tests and then terminate.
.IP "\fB\-\-max\-time\fR=\fIN\fR" 4
.IX Item "--max-time=N"
Spend at most \fIN\fR seconds (approximately) running tests and then terminate.
.IP "\fB\-\-shuffle\fR" 4
.IX Item "--shuffle"
Run the tests in a random order.
.SH "ADDITIONAL OPTIONS"
.IX Header "ADDITIONAL OPTIONS"
.IP "\fB\-\-debug\fR" 4
.IX Item "--debug"
Run \fBlit\fR in debug mode, for debugging configuration issues and \fBlit\fR itself.
.IP "\fB\-\-show\-suites\fR" 4
.IX Item "--show-suites"
List the discovered test suites as part of the standard output.
.IP "\fB\-\-no\-tcl\-as\-sh\fR" 4
.IX Item "--no-tcl-as-sh"
Run Tcl scripts internally (instead of converting to shell scripts).
.IP "\fB\-\-repeat\fR=\fIN\fR" 4
.IX Item "--repeat=N"
Run each test \fIN\fR times. Currently this is primarily useful for timing tests,
other results are not collated in any reasonable fashion.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
\&\fBlit\fR will exit with an exit code of 1 if there are any \s-1FAIL\s0 or \s-1XPASS\s0
results. Otherwise, it will exit with the status 0. Other exit codes are used
for non-test related failures (for example a user error or an internal program
error).
.SH "TEST DISCOVERY"
.IX Header "TEST DISCOVERY"
The inputs passed to \fBlit\fR can be either individual tests, or entire
directories or hierarchies of tests to run. When \fBlit\fR starts up, the first
thing it does is convert the inputs into a complete list of tests to run as part
of \fItest discovery\fR.
.PP
In the \fBlit\fR model, every test must exist inside some \fItest suite\fR. \fBlit\fR
resolves the inputs specified on the command line to test suites by searching
upwards from the input path until it finds a \fIlit.cfg\fR or \fIlit.site.cfg\fR
file. These files serve as both a marker of test suites and as configuration
files which \fBlit\fR loads in order to understand how to find and run the tests
inside the test suite.
.PP
Once \fBlit\fR has mapped the inputs into test suites it traverses the list of
inputs adding tests for individual files and recursively searching for tests in
directories.
.PP
This behavior makes it easy to specify a subset of tests to run, while still
allowing the test suite configuration to control exactly how tests are
interpreted. In addition, \fBlit\fR always identifies tests by the test suite they
are in, and their relative path inside the test suite. For appropriately
configured projects, this allows \fBlit\fR to provide convenient and flexible
support for out-of-tree builds.
.SH "TEST STATUS RESULTS"
.IX Header "TEST STATUS RESULTS"
Each test ultimately produces one of the following six results:
.IP "\fB\s-1PASS\s0\fR" 4
.IX Item "PASS"
The test succeeded.
.IP "\fB\s-1XFAIL\s0\fR" 4
.IX Item "XFAIL"
The test failed, but that is expected. This is used for test formats which allow
specifying that a test does not currently work, but wish to leave it in the test
suite.
.IP "\fB\s-1XPASS\s0\fR" 4
.IX Item "XPASS"
The test succeeded, but it was expected to fail. This is used for tests which
were specified as expected to fail, but are now succeeding (generally because
the feature they test was broken and has been fixed).
.IP "\fB\s-1FAIL\s0\fR" 4
.IX Item "FAIL"
The test failed.
.IP "\fB\s-1UNRESOLVED\s0\fR" 4
.IX Item "UNRESOLVED"
The test result could not be determined. For example, this occurs when the test
could not be run, the test itself is invalid, or the test was interrupted.
.IP "\fB\s-1UNSUPPORTED\s0\fR" 4
.IX Item "UNSUPPORTED"
The test is not supported in this environment. This is used by test formats
which can report unsupported tests.
.PP
Depending on the test format tests may produce additional information about
their status (generally only for failures). See the Output
section for more information.
.SH "LIT INFRASTRUCTURE"
.IX Header "LIT INFRASTRUCTURE"
This section describes the \fBlit\fR testing architecture for users interested in
creating a new \fBlit\fR testing implementation, or extending an existing one.
.PP
\&\fBlit\fR proper is primarily an infrastructure for discovering and running
arbitrary tests, and to expose a single convenient interface to these
tests. \fBlit\fR itself doesn't know how to run tests, rather this logic is
defined by \fItest suites\fR.
.SS "\s-1TEST\s0 \s-1SUITES\s0"
.IX Subsection "TEST SUITES"
As described in \*(L"\s-1TEST\s0 \s-1DISCOVERY\s0\*(R", tests are always located inside a \fItest
suite\fR. Test suites serve to define the format of the tests they contain, the
logic for finding those tests, and any additional information to run the tests.
.PP
\&\fBlit\fR identifies test suites as directories containing \fIlit.cfg\fR or
\&\fIlit.site.cfg\fR files (see also \fB\-\-config\-prefix\fR). Test suites are initially
discovered by recursively searching up the directory hierarchy for all the input
files passed on the command line. You can use \fB\-\-show\-suites\fR to display the
discovered test suites at startup.
.PP
Once a test suite is discovered, its config file is loaded. Config files
themselves are Python modules which will be executed. When the config file is
executed, two important global variables are predefined:
.IP "\fBlit\fR" 4
.IX Item "lit"
The global \fBlit\fR configuration object (a \fILitConfig\fR instance), which defines
the builtin test formats, global configuration parameters, and other helper
routines for implementing test configurations.
.IP "\fBconfig\fR" 4
.IX Item "config"
This is the config object (a \fITestingConfig\fR instance) for the test suite,
which the config file is expected to populate. The following variables are also
available on the \fIconfig\fR object, some of which must be set by the config and
others are optional or predefined:
.Sp
\&\fBname\fR \fI[required]\fR The name of the test suite, for use in reports and
diagnostics.
.Sp
\&\fBtest_format\fR \fI[required]\fR The test format object which will be used to
discover and run tests in the test suite. Generally this will be a builtin test
format available from the \fIlit.formats\fR module.
.Sp
\&\fBtest_src_root\fR The filesystem path to the test suite root. For out-of-dir
builds this is the directory that will be scanned for tests.
.Sp
\&\fBtest_exec_root\fR For out-of-dir builds, the path to the test suite root inside
the object directory. This is where tests will be run and temporary output files
placed.
.Sp
\&\fBenvironment\fR A dictionary representing the environment to use when executing
tests in the suite.
.Sp
\&\fBsuffixes\fR For \fBlit\fR test formats which scan directories for tests, this
variable is a list of suffixes to identify test files. Used by: \fIShTest\fR,
\&\fITclTest\fR.
.Sp
\&\fBsubstitutions\fR For \fBlit\fR test formats which substitute variables into a test
script, the list of substitutions to perform. Used by: \fIShTest\fR, \fITclTest\fR.
.Sp
\&\fBunsupported\fR Mark an unsupported directory, all tests within it will be
reported as unsupported. Used by: \fIShTest\fR, \fITclTest\fR.
.Sp
\&\fBparent\fR The parent configuration, this is the config object for the directory
containing the test suite, or None.
.Sp
\&\fBroot\fR The root configuration. This is the top-most \fBlit\fR configuration in
the project.
.Sp
\&\fBon_clone\fR The config is actually cloned for every subdirectory inside a test
suite, to allow local configuration on a per-directory basis. The \fIon_clone\fR
variable can be set to a Python function which will be called whenever a
configuration is cloned (for a subdirectory). The function should takes three
arguments: (1) the parent configuration, (2) the new configuration (which the
\&\fIon_clone\fR function will generally modify), and (3) the test path to the new
directory being scanned.
.SS "\s-1TEST\s0 \s-1DISCOVERY\s0"
.IX Subsection "TEST DISCOVERY"
Once test suites are located, \fBlit\fR recursively traverses the source directory
(following \fItest_src_root\fR) looking for tests. When \fBlit\fR enters a
sub-directory, it first checks to see if a nested test suite is defined in that
directory. If so, it loads that test suite recursively, otherwise it
instantiates a local test config for the directory (see \*(L"\s-1LOCAL\s0 \s-1CONFIGURATION\s0
\&\s-1FILES\s0\*(R").
.PP
Tests are identified by the test suite they are contained within, and the
relative path inside that suite. Note that the relative path may not refer to an
actual file on disk; some test formats (such as \fIGoogleTest\fR) define \*(L"virtual
tests\*(R" which have a path that contains both the path to the actual test file and
a subpath to identify the virtual test.
.SS "\s-1LOCAL\s0 \s-1CONFIGURATION\s0 \s-1FILES\s0"
.IX Subsection "LOCAL CONFIGURATION FILES"
When \fBlit\fR loads a subdirectory in a test suite, it instantiates a local test
configuration by cloning the configuration for the parent direction \*(-- the root
of this configuration chain will always be a test suite. Once the test
configuration is cloned \fBlit\fR checks for a \fIlit.local.cfg\fR file in the
subdirectory. If present, this file will be loaded and can be used to specialize
the configuration for each individual directory. This facility can be used to
define subdirectories of optional tests, or to change other configuration
parameters \*(-- for example, to change the test format, or the suffixes which
identify test files.
.SS "\s-1TEST\s0 \s-1RUN\s0 \s-1OUTPUT\s0 \s-1FORMAT\s0"
.IX Subsection "TEST RUN OUTPUT FORMAT"
The b<lit> output for a test run conforms to the following schema, in both short
and verbose modes (although in short mode no \s-1PASS\s0 lines will be shown). This
schema has been chosen to be relatively easy to reliably parse by a machine (for
example in buildbot log scraping), and for other tools to generate.
.PP
Each test result is expected to appear on a line that matches:
.PP
<result code>: <test name> (<progress info>)
.PP
where <result\-code> is a standard test result such as \s-1PASS\s0, \s-1FAIL\s0, \s-1XFAIL\s0, \s-1XPASS\s0,
\&\s-1UNRESOLVED\s0, or \s-1UNSUPPORTED\s0. The performance result codes of \s-1IMPROVED\s0 and
\&\s-1REGRESSED\s0 are also allowed.
.PP
The <test name> field can consist of an arbitrary string containing no newline.
.PP
The <progress info> field can be used to report progress information such as
(1/300) or can be empty, but even when empty the parentheses are required.
.PP
Each test result may include additional (multiline) log information in the
following format.
.PP
<log delineator> \s-1TEST\s0 '(<test name>)' <trailing delineator>
\&... log message ...
<log delineator>
.PP
where <test name> should be the name of a preceeding reported test, <log
delineator> is a string of '*' characters \fIat least\fR four characters long (the
recommended length is 20), and <trailing delineator> is an arbitrary (unparsed)
string.
.PP
The following is an example of a test run output which consists of four tests A,
B, C, and D, and a log message for the failing test C.
.PP
\fIExample Test Run Output Listing\fR
.IX Subsection "Example Test Run Output Listing"
.PP
\&\s-1PASS:\s0 A (1 of 4)
\&\s-1PASS:\s0 B (2 of 4)
\&\s-1FAIL:\s0 C (3 of 4)
******************** \s-1TEST\s0 'C' \s-1FAILED\s0 ********************
Test 'C' failed as a result of exit code 1.
********************
\&\s-1PASS:\s0 D (4 of 4)
.SS "\s-1LIT\s0 \s-1EXAMPLE\s0 \s-1TESTS\s0"
.IX Subsection "LIT EXAMPLE TESTS"
The \fBlit\fR distribution contains several example implementations of test suites
in the \fIExampleTests\fR directory.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvalgrind\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Daniel Dunbar and maintained by the \s-1LLVM\s0 Team (<http://llvm.org/>).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 389:" 4
.IX Item "Around line 389:"
=back without =over
